fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
c(fpr_l, fp/(n*p_0))
c(tpr_l, tp/(n*(1-p_0)))
c(fdr_l, fp/(fp+tp))
}
lapply(t_l,find_rates)
find_rates(0)
find_rates <- function(t) {
df$pred = (data > t)*1
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr_l <- c(fpr_l, fp/(n*p_0))
tpr_l <- c(tpr_l, tp/(n*(1-p_0)))
fdr_l <- c(fdr_l, fp/(fp+tp))
}
lapply(t_l,find_rates)
find_rates <- function(t) {
df$pred = (data > t)*1
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr_l <- append(fpr_l, fp/(n*p_0))
tpr_l <- c(tpr_l, tp/(n*(1-p_0)))
fdr_l <- c(fdr_l, fp/(fp+tp))
}
lapply(t_l,find_rates)
find_rates <- function(t) {
df$pred = (data > t)*1
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr = fp/(n*p_0)
tpr = tp/(n*(1-p_0))
fdr = fp/(fp+tp)
return(fpr, tpr, fdr)
}
lapply(t_l,find_rates)
return(c(fpr, tpr, fdr))
find_rates <- function(t) {
df$pred = (data > t)*1
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr = fp/(n*p_0)
tpr = tp/(n*(1-p_0))
fdr = fp/(fp+tp)
return(c(fpr, tpr, fdr))
}
lapply(t_l,find_rates)
data.frame(lapply(t_l,find_rates))
temp = data.frame(lapply(t_l,find_rates))
View(temp)
return([fpr, tpr, fdr])
find_rates <- function(t) {
df$pred = (data > t)*1
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr = fp/(n*p_0)
tpr = tp/(n*(1-p_0))
fdr = fp/(fp+tp)
return([fpr, tpr, fdr])
}
temp = data.frame(invert(lapply(t_l,find_rates)))
temp = data.frame(transpose(lapply(t_l,find_rates)))
temp[1,]
rates = data.frame(transpose(lapply(t_l,find_rates)))
rates = data.frame(lapply(t_l,find_rates))
fpr_l = rates[1,]
tpr_l = rates[2,]
View(tpr_l)
View(fpr_l)
fdr_l = rates[3,]
plot(fpr_l, tpr_l)
plot(t_l, fpr_l, main="FPR as funciton of t",
xlab="t", ylab="FPR")
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
par(mfrow=c(1,3))
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
#1.
mu_0 = 0
mu_a = 3
sd_0 = 3
sd_a = 2
#2.
n = 1e4
p_0 = 0.7
data = c(rnorm(n*p_0, mu_0, sd_0), (rnorm(n*(1-p_0), mu_a, sd_a)))
class = c(rep(0,n*p_0),rep(1,n*(1-p_0)))
df = data.frame(data, class)
#3.
t=3
df$pred = (data > t)*1
#4.
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr = fp/(n*p_0)
tpr = tp/(n*(1-p_0))
fdr = fp/(fp+tp)
#5.
t_l = seq(-5,5,by=0.1)
find_rates <- function(t) {
df$pred = (data > t)*1
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr = fp/(n*p_0)
tpr = tp/(n*(1-p_0))
fdr = fp/(fp+tp)
return(c(fpr, tpr, fdr))
}
rates = data.frame(lapply(t_l,find_rates))
fpr_l = rates[1,]
tpr_l = rates[2,]
fdr_l = rates[3,]
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
par()
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
dev.off()
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
View(tpr_l)
plot(fpr_l[1,], tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
View(fdr_l)
list(fpr_l)
fpr_l = list(rates[1,])
View(fpr_l)
split(rates,nrow(rates))
split(rates,nrow(rates))[1]
split(rates,nrow(rates))[2]
split(rates,nrow(rates))[c(1)]
split(rates,nrow(rates))[c(2)]
split(rates,nrow(rates))[1,]
View(df)
View(fdr_l)
View(fpr_l)
View(fdr_l)
fpr_l = rates[1,]
tpr_l = rates[2,]
fdr_l = rates[3,]
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", ylab="TPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR")
dev.off()
plot(fpr_l, tpr_l, main="TPR as funciton of FPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR")
scatterplot(fpr_l, tpr_l, main="TPR as funciton of FPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", pch=1)
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", pch=10)
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR", pch=1)
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR", pch=10)
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR", pch=19)
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR", pch=2)
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR", pch=3)
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR", pch=4)
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR", pch=5)
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
c(1)
c(1,0)
c(,1)
rates = matrix(lapply(t_l,find_rates))
View(rates)
rates = c(lapply(t_l,find_rates))
View(rates)
fpr_l = rates[1,]
rates[,1]
rates[1]
matrix(rates)
vector(0,1,2)
vector([0,1,2])
vector(c(0,1,2))
rates = data.frame(lapply(t_l,find_rates))
rates[[1]]
rates[1]
rates[1,]
rates[1,].asvector()
as.vector(rates[1,])
fpr_l = as.vector(rates[1,])
View(fdr_l)
View(fpr_l)
View(tpr_l)
rates = t(data.frame(lapply(t_l,find_rates)))
View(rates)
rates[[1]]
rates[1,]
rates[,1]
rates$v1
rates$V1
as.vector(rates)
as.vector(rates[1,])
as.vector(rates[,1])
tpr_l = as.vector(rates[,2])
#1.
mu_0 = 0
mu_a = 3
sd_0 = 3
sd_a = 2
#2.
n = 1e4
p_0 = 0.7
data = c(rnorm(n*p_0, mu_0, sd_0), (rnorm(n*(1-p_0), mu_a, sd_a)))
class = c(rep(0,n*p_0),rep(1,n*(1-p_0)))
df = data.frame(data, class)
#3.
t=3
df$pred = (data > t)*1
#4.
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr = fp/(n*p_0)
tpr = tp/(n*(1-p_0))
fdr = fp/(fp+tp)
#5.
t_l = seq(-5,5,by=0.1)
find_rates <- function(t) {
df$pred = (data > t)*1
fp = sum((df$pred == 1) & (df$pred != df$class))
tp = sum((df$pred == 1) & (df$pred == df$class))
fpr = fp/(n*p_0)
tpr = tp/(n*(1-p_0))
fdr = fp/(fp+tp)
return(c(fpr, tpr, fdr))
}
rates = t(data.frame(lapply(t_l,find_rates)))
fpr_l = as.vector(rates[,1])
tpr_l = as.vector(rates[,2])
fdr_l = as.vector(rates[,3])
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fdr_l, tpr_l, main="TPR as funciton of FDR", xlab="FDR", ylab="TPR")
params = c(0,3,3,2)
params[1]
params[2]
params[3]
params[4]
produce_graphs(c(0,1,1,4))
#6.
produce_graphs(params) {
mu_0 = params[1]
mu_a = params[2]
sd_0 = params[3]
sd_1 = params[4]
n = 1e4
p_0 = 0.7
data = c(rnorm(n*p_0, mu_0, sd_0), (rnorm(n*(1-p_0), mu_a, sd_a)))
class = c(rep(0,n*p_0),rep(1,n*(1-p_0)))
df = data.frame(data, class)
t_l = seq(-5,5,by=0.1)
rates = t(data.frame(lapply(t_l,find_rates)))
fpr_l = as.vector(rates[,1])
tpr_l = as.vector(rates[,2])
fdr_l = as.vector(rates[,3])
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fdr_l, tpr_l, main="TPR as funciton of FDR", xlab="FDR", ylab="TPR")
}
#6.
produce_graphs <- function(params) {
mu_0 = params[1]
mu_a = params[2]
sd_0 = params[3]
sd_1 = params[4]
n = 1e4
p_0 = 0.7
data = c(rnorm(n*p_0, mu_0, sd_0), (rnorm(n*(1-p_0), mu_a, sd_a)))
class = c(rep(0,n*p_0),rep(1,n*(1-p_0)))
df = data.frame(data, class)
t_l = seq(-5,5,by=0.1)
rates = t(data.frame(lapply(t_l,find_rates)))
fpr_l = as.vector(rates[,1])
tpr_l = as.vector(rates[,2])
fdr_l = as.vector(rates[,3])
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fdr_l, tpr_l, main="TPR as funciton of FDR", xlab="FDR", ylab="TPR")
}
produce_graphs(c(0,1,1,4))
produce_graphs(c(0,1,1,4))
#6.
params = c(
c(-3,0,3,2),
c(-3,3,4,3),
c(0,2,3,1),
c(0,3,2,1),
c(0,4,2,2)
)
for(x in params) {
mu_0 = x[1]
mu_a = x[2]
sd_0 = x[3]
sd_1 = x[4]
n = 1e4
p_0 = 0.7
data = c(rnorm(n*p_0, mu_0, sd_0), (rnorm(n*(1-p_0), mu_a, sd_a)))
class = c(rep(0,n*p_0),rep(1,n*(1-p_0)))
df = data.frame(data, class)
t_l = seq(-5,5,by=0.1)
rates = t(data.frame(lapply(t_l,find_rates)))
fpr_l = as.vector(rates[,1])
tpr_l = as.vector(rates[,2])
fdr_l = as.vector(rates[,3])
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fdr_l, tpr_l, main="TPR as funciton of FDR", xlab="FDR", ylab="TPR")
}
params[1]
#6.
params = c(
list(-3,0,3,2),
list(-3,3,4,3),
list(0,2,3,1),
list(0,3,2,1),
list(0,4,2,2)
)
View(params)
#6.
params = list(
list(-3,0,3,2),
list(-3,3,4,3),
list(0,2,3,1),
list(0,3,2,1),
list(0,4,2,2)
)
View(params)
for(x in params) {
mu_0 = x[1]
mu_a = x[2]
sd_0 = x[3]
sd_1 = x[4]
n = 1e4
p_0 = 0.7
data = c(rnorm(n*p_0, mu_0, sd_0), (rnorm(n*(1-p_0), mu_a, sd_a)))
class = c(rep(0,n*p_0),rep(1,n*(1-p_0)))
df = data.frame(data, class)
t_l = seq(-5,5,by=0.1)
rates = t(data.frame(lapply(t_l,find_rates)))
fpr_l = as.vector(rates[,1])
tpr_l = as.vector(rates[,2])
fdr_l = as.vector(rates[,3])
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fdr_l, tpr_l, main="TPR as funciton of FDR", xlab="FDR", ylab="TPR")
}
for(x in params) {
mu_0 = x[1]
mu_a = x[2]
sd_0 = x[3]
sd_a = x[4]
n = 1e4
p_0 = 0.7
data = c(rnorm(n*p_0, mu_0, sd_0), (rnorm(n*(1-p_0), mu_a, sd_a)))
class = c(rep(0,n*p_0),rep(1,n*(1-p_0)))
df = data.frame(data, class)
t_l = seq(-5,5,by=0.1)
rates = t(data.frame(lapply(t_l,find_rates)))
fpr_l = as.vector(rates[,1])
tpr_l = as.vector(rates[,2])
fdr_l = as.vector(rates[,3])
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fdr_l, tpr_l, main="TPR as funciton of FDR", xlab="FDR", ylab="TPR")
}
params[0]
#6.
params = append(
list(-3,0,3,2),
list(-3,3,4,3),
list(0,2,3,1),
list(0,3,2,1),
list(0,4,2,2)
)
#6.
params = list(
c(-3,0,3,2),
c(-3,3,4,3),
c(0,2,3,1),
c(0,3,2,1),
c(0,4,2,2)
)
params[0]
params[[0]]
params[1,]
params[1]
for(x in params) {
mu_0 = x[1]
mu_a = x[2]
sd_0 = x[3]
sd_a = x[4]
n = 1e4
p_0 = 0.7
data = c(rnorm(n*p_0, mu_0, sd_0), (rnorm(n*(1-p_0), mu_a, sd_a)))
class = c(rep(0,n*p_0),rep(1,n*(1-p_0)))
df = data.frame(data, class)
t_l = seq(-5,5,by=0.1)
rates = t(data.frame(lapply(t_l,find_rates)))
fpr_l = as.vector(rates[,1])
tpr_l = as.vector(rates[,2])
fdr_l = as.vector(rates[,3])
plot(t_l, fpr_l, main="FPR as funciton of t", xlab="t", ylab="FPR")
plot(t_l, tpr_l, main="TPR as funciton of t", xlab="t", ylab="TPR")
plot(t_l, fdr_l, main="FDR as funciton of t", xlab="t", ylab="FDR")
plot(fpr_l, tpr_l, main="TPR as funciton of FPR", xlab="FPR", ylab="TPR")
plot(fdr_l, tpr_l, main="TPR as funciton of FDR", xlab="FDR", ylab="TPR")
}
str(mu_0)
"mu_0 =" + str(mu_0)
paste(1:12)
paste("mu_0 =",str(mu_0))
paste("mu_0 =",mu_0)
paste("mu_0 =",mu_0,;)
paste("mu_0 =",mu_0, ";")
print(paste("mu_0 = ", mu_0, "; mu_a = ", mu_a, "; sd_0 = ", sd_0, "; sd_a = ", sd_a))
print(paste("mu_0 =", mu_0, "; mu_a =", mu_a, "; sd_0 =", sd_0, "; sd_a =", sd_a))
print(paste("mu_0 =", mu_0, "mu_a =", mu_a, "sd_0 =", sd_0, "sd_a =", sd_a))
#1.
mu_0 = 0
mu_a = 3
sd_0 = 3
sd_a = 2
#Task 1
n = 10000
z = runif(n)
rand.samples = rep(NA,n)
comp = sample(1:2, prob=c(0.8,0.2),size=n,replace=TRUE)
mus = c(0,3)
#Task 1
N = 10000
comp = sample(1:2, prob=c(0.8,0.2),size=n,replace=TRUE)
mus = c(0,3)
zscores = rnorm(n=N, mean=mus[comp],sd=1)
comp = sample(1:2, prob=c(0.8,0.2),size=n,replace=TRUE)
comp = sample(1:2, prob=c(0.8,0.2),size=N,replace=TRUE)
mus = c(0,3)
zscores = rnorm(n=N, mean=mus[comp],sd=1)
hist(zscore)
setwd("~/Class/DSC 180B/DSC180B-Capstone-Project/src/analysis")
setwd('..')
setwd('..')
datadir = "data/cleaned"
df1 = read.table(file=paste(datadir,"golub1",sep='/'))
g1 = 3:22
g2 = 23:36
p.value = 2*(1 - pnorm(abs(t.stat)))
p = seq(0,1,by=0.01)
hist(p.value, freq=F)
x = seq(-8,8,by=0.1)
hist(t.stat, breaks=x, freq=F)
lines(x, dnorm(x), lwd=2, col='red')
g2 = 30:40
p.value = 2*(1 - pnorm(abs(t.stat)))
p = seq(0,1,by=0.01)
lines(p, dunif(p), lwd=2, col='red')
hist(p.value, freq=F)
lines(p, dunif(p), lwd=2, col='red')
df2 = read.table(file=paste(datadir,"golub2",sep='/'))
t.stat = apply(X=df1, MARGIN=1, FUN=function(X){t.test(as.numeric(X[g1]),as.numeric(X[g2]))$statistic})
t.stat = apply(X=df2, MARGIN=1, FUN=function(X){t.test(as.numeric(X[g1]),as.numeric(X[g2]))$statistic})
g1 = 3:29
datadir = "data/cleaned"
df1 = read.table(file=paste(datadir,"golub1",sep='/'))
df2 = read.table(file=paste(datadir,"golub2",sep='/'))
g1 = 3:22
g2 = 23:36
t.stat = apply(X=df1, MARGIN=1, FUN=function(X){t.test(as.numeric(X[g1]),as.numeric(X[g2]))$statistic})
p.value = 2*(1 - pnorm(abs(t.stat)))
p = seq(0,1,by=0.01)
hist(p.value, freq=F)
lines(p, dunif(p), lwd=2, col='red')
x = seq(-8,8,by=0.1)
hist(t.stat, breaks=x, freq=F)
lines(x, dnorm(x), lwd=2, col='red')
g1 = 3:29
g2 = 30:40
t.stat = apply(X=df2, MARGIN=1, FUN=function(X){t.test(as.numeric(X[g1]),as.numeric(X[g2]))$statistic})
p.value = 2*(1 - pnorm(abs(t.stat)))
p = seq(0,1,by=0.01)
hist(p.value, freq=F)
lines(p, dunif(p), lwd=2, col='red')
x = seq(-8,8,by=0.1)
hist(t.stat, breaks=x, freq=F)
lines(x, dnorm(x), lwd=2, col='red')
df = apply(X=df1, MARGIN=1, FUN=function(X){t.test(as.numeric(X[g1]),as.numeric(X[g2]))$parameter})
df
